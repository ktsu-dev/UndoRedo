---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT RULES & CODING STANDARDS

This document outlines the rules, coding standards, workflow guidelines, and best practices for all projects. It serves as the central reference for the AI coding assistant and all developers involved.

*   Adhere to SOLID and DRY principles.
*   Use dependency injection.
*   Employ a contacts, models, and services architecture.

## TECH STACK

*   .NET (Specify version as needed)

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

*   All projects must have a solution file (.sln).
*   Include a `docs` directory for design documentation.

## WORKFLOW & RELEASE RULES

*   After making commits, always push changes to the remote repository: `git push origin main`.

## DEBUGGING

When running tests, use the following commands:

*   `dotnet restore` to restore dependencies.
*   `dotnet build` to build the project.
*   `dotnet test` to run tests. Use `--nologo` to suppress the banner.
*   `dotnet test --verbosity normal --logger "console;verbosity=detailed" | cat` for verbose output.
*   If facing terminal output issues, check build outputs in `/bin/Debug/net9.0/` to confirm successful build and test execution.
*   If encountering `CS0101`, `CS0111` errors, carefully review the project structure and ensure there are no duplicate class or interface definitions within the same namespace.
*   If encountering `CS0246` errors related to missing `IServiceCollection`, ensure the correct using directive (`using Microsoft.Extensions.DependencyInjection;`) is included in the relevant files.
*   If encountering `CS0535` errors, ensure that the class fully implements the interface and all its members.
*   When working with `IServiceCollection`, if encountering errors related to missing `TryAddSingleton`, `TryAddTransient`, or `TryAddScoped` extension methods, ensure the `Microsoft.Extensions.DependencyInjection.Extensions` namespace is included via a `using` directive.
*   When validating parameters, always check for null values to prevent `ArgumentNullException`.

## BEST PRACTICES

*   When validating parameters, always check for null values to prevent `ArgumentNullException`.